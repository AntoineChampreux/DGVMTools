% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotSubannual.R
\name{plotSubannual}
\alias{plotSubannual}
\title{Plots sub-annual cycles}
\usage{
plotSubannual(fields, layers = NULL, title = NULL, subtitle = NULL,
  plotAverage = TRUE, text.multiplier = NULL, plot = TRUE,
  facet.scales = "fixed", year.col.gradient = NULL, alpha = 0.2, ...)
}
\arguments{
\item{fields}{The data to plot. Can be a Field or a list of Fields.}

\item{layers}{A list of strings specifying which layers to plot.  Defaults to all layers.}

\item{title}{A character string to override the default title.}

\item{subtitle}{A character string to override the default subtitle.}

\item{plotAverage}{Boolean, if TRUE plot the mean of all years}

\item{text.multiplier}{A number specifying an overall multiplier for the text on the plot.
Make it bigger if the text is too small on large plots and vice-versa.}

\item{plot}{Boolean, if FALSE return a data.table with the final data instead of the ggplot object.  This can be useful for inspecting the structure of the facetting columns, amongst other things.}

\item{facet.scales}{Character string.  If faceting (see above) use "fixed" to specify same scales on each ribbon (default), or "free"/"free_x"/"free_y" for tailored scales}

\item{year.col.gradient}{A colour palette as a function to use to colour the annual lines according to their Year.  Only works for a single Quantity and a single Source.}

\item{alpha}{A numeric (range 0-1), to give the transparency (alpha) of the annual lines}

\item{...}{Arguments passed to getField().  Of particular relevance are \code{spatial.extent} and \code{spatial.aggregate.method} (to determine over 
which spatial extent to plot the seasonal cycle and, if that extent includes more that one gridcell, how to aggregate across that extent)}
}
\value{
Returns either a ggplot2 object or a data.table (depending on the 'plot' argument)
}
\description{
For a list of Runs and a list of Quantities, plots the sub-annual cycles.  Note this function actually reads the data, 
so might not be too efficient unless the arguments which are passes through to getField() via the "..." argument are optimised.  
For example, by using "store.full = TRUE" and the combination "write = TRUE" and "read.full = FALSE".
}
\author{
Matthew Forrest \email{matthew.forrest@senckenberg.de}
}
